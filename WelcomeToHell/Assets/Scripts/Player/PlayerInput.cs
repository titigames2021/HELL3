//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""GeneralMovement"",
            ""id"": ""640fba03-e67e-4d2b-8794-39231a15d2aa"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""22f48b16-3572-4527-81aa-e1ce9497cb6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""check"",
                    ""type"": ""Button"",
                    ""id"": ""a5a99963-8030-462b-a23f-3442dd0cd32f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""b79af387-45b5-4959-a7eb-6fa92e534861"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f5c5bfbb-fe1c-45b8-a57a-7251fd265d9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""6a16bf58-7b82-4db2-a09e-04de2fa0cbf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f2aba79e-22f4-4abd-99bf-64ddda82e84b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""061d4bac-fe9c-4da9-bd68-d2c76839bda2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7b7bf9d0-bd0c-42d5-8317-34df4420efb4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""b1fbdaf2-3e0e-434c-a8e6-cad86b9f2dd3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""edb06c14-9652-4d10-9b0d-e75cfab1b79e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""453ca2ae-29bf-436b-a71e-1d6966f83a77"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""id"": ""0b895508-e408-4f23-ae10-3f249db12d3c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6d53e324-1c17-468c-b99c-26e8d638f248"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e262445c-d9b0-4b25-adec-193c1c0d8523"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9007d4ea-ce61-42ba-8bde-84fd4f704577"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""38edb906-ebcc-4fe5-bd5e-44a775bb9174"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bcf6b0ba-a559-4994-bdad-d01cbe45ed19"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""204f7968-20c9-414f-bd86-c55eba08fc4c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GeneralMovement
        m_GeneralMovement = asset.FindActionMap("GeneralMovement", throwIfNotFound: true);
        m_GeneralMovement_Move = m_GeneralMovement.FindAction("Move", throwIfNotFound: true);
        m_GeneralMovement_check = m_GeneralMovement.FindAction("check", throwIfNotFound: true);
        m_GeneralMovement_Aim = m_GeneralMovement.FindAction("Aim", throwIfNotFound: true);
        m_GeneralMovement_Jump = m_GeneralMovement.FindAction("Jump", throwIfNotFound: true);
        m_GeneralMovement_Shoot = m_GeneralMovement.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GeneralMovement
    private readonly InputActionMap m_GeneralMovement;
    private IGeneralMovementActions m_GeneralMovementActionsCallbackInterface;
    private readonly InputAction m_GeneralMovement_Move;
    private readonly InputAction m_GeneralMovement_check;
    private readonly InputAction m_GeneralMovement_Aim;
    private readonly InputAction m_GeneralMovement_Jump;
    private readonly InputAction m_GeneralMovement_Shoot;
    public struct GeneralMovementActions
    {
        private @PlayerInput m_Wrapper;
        public GeneralMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GeneralMovement_Move;
        public InputAction @check => m_Wrapper.m_GeneralMovement_check;
        public InputAction @Aim => m_Wrapper.m_GeneralMovement_Aim;
        public InputAction @Jump => m_Wrapper.m_GeneralMovement_Jump;
        public InputAction @Shoot => m_Wrapper.m_GeneralMovement_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_GeneralMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralMovementActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralMovementActions instance)
        {
            if (m_Wrapper.m_GeneralMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnMove;
                @check.started -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnCheck;
                @check.performed -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnCheck;
                @check.canceled -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnCheck;
                @Aim.started -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnAim;
                @Jump.started -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnJump;
                @Shoot.started -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GeneralMovementActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_GeneralMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @check.started += instance.OnCheck;
                @check.performed += instance.OnCheck;
                @check.canceled += instance.OnCheck;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public GeneralMovementActions @GeneralMovement => new GeneralMovementActions(this);
    public interface IGeneralMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
